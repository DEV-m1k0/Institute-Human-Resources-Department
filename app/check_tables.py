import tkinter as tk
from create_DB import CreateDataBase
from tkinter import ttk


class Check_all_tables(tk.Tk):
    """
    –ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π
    """
    def __init__(self, screenName: str | None = None, baseName: str | None = None, className: str = "Tk", useTk: bool = True, sync: bool = False, use: str | None = None) -> None:
        super().__init__(screenName, baseName, className, useTk, sync, use)
        
        self.geometry("650x450")
        self.title("Tables")
        self.resizable(height=False, width=False)
        
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –∫–æ–º–±–æ–±–æ–∫—Å–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è–º–∏
        self.sort_names = {'–í –æ—Ç–ø—É—Å–∫–µ' : 'status_vacation', '–ü–µ–Ω—Å–∏–æ–Ω–µ—Ä':'status_retirement', '–ü—Ä–µ–¥–ø–µ–Ω—Å–∏–æ–Ω–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞':'status_pre_retirement', '–ë–µ–∑–¥–µ—Ç–Ω—ã–π':'status_childless',
                           '–ú–Ω–æ–≥–æ–¥–µ—Ç–Ω—ã–π':'status_many_children', '–í–µ—Ç–µ—Ä–∞–Ω':'status_veteran'}
        
        self.__add_widgets()
        
        self.mainloop()        
    
    def __add_widgets(self):
        """
        –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–∂–µ—Ç–æ–≤ –Ω–∞ —ç–∫—Ä–∞–Ω
        """
        
        # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç—ã
        tables_label = tk.Label(self, text='–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π', font=('Ariel', 28))
        
        self.tables_name_var = tk.StringVar(self)
        self.tables_name_var.trace('w', self.__choose)
        self.tables_name_optionmenu =  ttk.OptionMenu(self, self.tables_name_var, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É', *('–í–∞–∫–∞–Ω—Å–∏–∏','–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏'))
        
        self.tables_data_listbox = tk.Listbox(self, height=20, width=100)
        
        self.sort_var = tk.StringVar(self)
        self.sort_var.trace('w', self.__sort)
        self.sort_optionmenu = ttk.OptionMenu(self, self.sort_var, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏', *self.sort_names)
        self.sort_optionmenu['state'] = 'disabled'
        
        back_btn = tk.Button(self, text='–ö –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', command=self.__back_to_panel)

        
        # –†–∞–∑–º–µ—â–∞–µ–º –∏—Ö
        tables_label.pack()
        self.tables_name_optionmenu.pack()
        self.sort_optionmenu.pack()
        self.tables_data_listbox.pack()
        back_btn.pack()
    
    def __choose(self, *args):
        """
        –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ —Ç–∞–±–ª–∏—Ü –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        """
        self.tables_data_listbox.delete(0, 'end')
        self.db = CreateDataBase()
        self.cursor = self.db.get_cursor()
        self.sort_var.set('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏')
        if self.tables_name_var.get() == "–í–∞–∫–∞–Ω—Å–∏–∏":
            self.sort_optionmenu['state'] = 'disabled'
            
            queue = """
                       SELECT job_vacancy.id, job_title.name, job_title.salary, department.name, vacancy_opening_date, vacancy_closing_date FROM job_vacancy
                       inner join job_title on job_vacancy.id_job_title = job_title.id
                       inner join department on department.id = job_vacancy.id_department
                       order by job_vacancy.id desc
                       """
        elif self.tables_name_var.get() == "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏":
            #üíÄ
            self.sort_optionmenu['state'] = 'enabled'
            queue = """
                       SELECT employees_and_positions.id, job_title.name, employees.name, employees.second_name, employees.surname,
                        employees.login, employees.password, employees.role, employees.age, employees.date_birth, 
                        employees.status_vacation, employees.status_retirement, employees.status_pre_retirement, 
                        employees.status_childless, employees.status_many_children, employees.status_veteran
                       FROM employees_and_positions
                       inner join job_title on employees_and_positions.id_job_title = job_title.id
                       inner join department on department.id = employees_and_positions.id_department
                       inner join employees on employees_and_positions.id_employee = employees.id
                       order by employees_and_positions.id desc
                       """
            self.sort_optionmenu['state'] = 'enabled'
        self.cursor.execute(queue)
        for el in self.cursor.fetchall():
            self.tables_data_listbox.insert(0, el)
    
    def __sort(self, *args):
        """
        –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü
        """
        self.tables_data_listbox.delete(0, 'end')
        queue = f"""
                       SELECT employees_and_positions.id, job_title.name, employees.name, employees.second_name, employees.surname,
                        employees.login, employees.password, employees.role, employees.age, employees.date_birth, 
                        employees.status_vacation, employees.status_retirement, employees.status_pre_retirement, 
                        employees.status_childless, employees.status_many_children, employees.status_veteran
                       FROM employees_and_positions
                       inner join job_title on employees_and_positions.id_job_title = job_title.id
                       inner join department on department.id = employees_and_positions.id_department
                       inner join employees on employees_and_positions.id_employee = employees.id
                       where {self.sort_names[self.sort_var.get()]} = "–¥–∞"
                       order by employees_and_positions.id desc        
                       """
        self.cursor.execute(queue)
        for el in self.cursor.fetchall():
            self.tables_data_listbox.insert(0, el)
    
    def __back_to_panel(self):
        self.destroy()
        from admin_panel import Admin_panel
        Admin_panel()
        

